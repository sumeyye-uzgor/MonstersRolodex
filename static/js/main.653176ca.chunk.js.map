{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,aCHdC,EAAW,SAACR,GAAD,OACpB,qBAAMC,UAAU,YAAhB,SAEQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLtBO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EACjDG,SAAUF,MCmCHG,E,kDAlCb,aAAe,IAAD,8BACZ,gBAYFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,gEAQO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAQnC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIG,GAAG,eAAP,gCACA,cAAC,EAAD,CAAWQ,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAE,EAAF,CAAWJ,SAAUoB,W,GA7BXI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.653176ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=250x180`} alt=\"monster\"></img>\r\n        <h1>{props.monster.name}</h1>\r\n        <h2>{props.monster.email}</h2>\r\n    </div>\r\n)","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.component'\r\n\r\nexport const CardList = (props) => (\r\n    < div className=\"card-list\" >\r\n        {\r\n            props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster}></Card>\r\n            ))\r\n        }\r\n    </div >\r\n);","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder}\r\n        onChange={handleChange} />\r\n)\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from \"./components/card-list/card-list.component.jsx\"\nimport React, { Component } from 'react';\nimport { SearchBox } from \"./components/search-box/search-box.component\"\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    }\n    // this.handleChange = this.handleChange.bind(this);\n  };\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((res) => res.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n  // handleChange(e) {\n  //   this.setState({ searchField: e.target.value })\n  // }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1 id=\"main-heading\"> Monsters Rolodex </h1>\n        <SearchBox placeholder=\"Search Monsters\" handleChange={this.handleChange} />\n        < CardList monsters={filteredMonsters} />\n      </div>\n      //comment for deploying\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}